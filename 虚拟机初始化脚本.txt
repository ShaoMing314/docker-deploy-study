#!/bin/bash

# 更新yum (可以不做,稍微浪费点时间)
# yum update -y

# 安装比较新的gcc (可以不做,稍微浪费点时间)
# sudo yum install gcc-c++ make -y

# 安装 git
yum install -y git



# 安装 wget
yum install -y wget



# 安装jdk
yum -y install java-1.8.0-openjdk* 
sleep 2


# 安装 node.js
cd /opt
wget https://npm.taobao.org/mirrors/node/v12.6.0/node-v12.6.0-linux-x64.tar.gz
tar -zxvf node-v12.6.0-linux-x64.tar.gz
mv node-v12.6.0-linux-x64 nodejs
ln -s /opt/nodejs/bin/npm /usr/local/bin/
ln -s /opt/nodejs/bin/node /usr/local/bin/
#安装cnpm
npm config set registry https://registry.npm.taobao.org
npm install -g cnpm --registry=https://registry.npm.taobao.org
# 建立cnpm 软连接
ln -s /opt/nodejs/lib/node_modules/cnpm/bin/cnpm  /usr/local/bin/cnpm



# 安装nginx
yum install -y nginx
# 关闭nginx ， 需要时候开启
nginx -s stop 






# 安装maven
yum install -y maven
> /etc/maven/settings.xml
cat >/etc/maven/settings.xml<<EOF
<?xml version="1.0" encoding="UTF-8"?>
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
  <pluginGroups>
  </pluginGroups>
  <proxies>
  </proxies>
  <servers>
  </servers>
  <mirrors>
    <mirror>
      <id>aliyunmaven</id>
      <mirrorOf>*</mirrorOf>
      <name>阿里云公共仓库</name>
      <url>https://maven.aliyun.com/repository/public</url>
    </mirror>
  </mirrors>
  <profiles>
  </profiles>
</settings>
EOF

mvn -v





# 安装 docker
# 卸载旧版本
sudo yum remove docker \
                docker-client \
                docker-client-latest \
                docker-common \
                docker-latest \
                docker-latest-logrotate \
              docker-logrotate \
                docker-engine
# 安装 Docker Engine-Community
sudo yum install -y yum-utils device-mapper-persistent-data lvm2
# 安装docker相关依赖
sudo yum-config-manager \
  --add-repo \
  http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
  
sudo yum -y install docker-ce docker-ce-cli containerd.io
# 配置docker阿里云镜像加速
 mkdir -p /etc/docker
 touch /etc/docker/daemon.json
 echo '{"registry-mirrors": ["https://1lnz32yq.mirror.aliyuncs.com"]}' >> /etc/docker/daemon.json
 # 重新启动docker，并使docker配置生效 
 systemctl daemon-reload 
sudo systemctl start docker



# 安装 docker-compose
# /bin/bash
# 下载安装
curl -L https://get.daocloud.io/docker/compose/releases/download/1.26.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
# 授权（一定要授权，负责没有权限）
chmod +x /usr/local/bin/docker-compose
# 验证docker-compose是否安装成功（查看版本）
docker-compose version

# docker常用命令
# docker以utf8编码格式进入mysql容器内部
# docker exec -it mysql env LANG=C.UTF-8 bash
# 构建镜像
# docker-compose build
# 构建镜像，--no-cache表示不用缓存，否则在重新编辑Dockerfile后再build可能会直接使用缓存而导致新编辑内容不生效
# docker-compose build --no-cache
# config 校验文件格式是否正确
# docker-compose -f docker-compose.yml config
# 运行服务
# ocker-compose up -d
# 启动/停止服务
# docker-compose start/stop 服务名
# 停止服务
# docker-compose down
# 查看容器日志
# docker logs -f 容器ID
# 查看镜像
# docker-compose images
# 拉取镜像
# docker-compose pull 镜像名


# 删除所有容器
# docker stop `docker ps -q -a` | xargs docker rm
# 删除所有标签为none的镜像
# docker images|grep \<none\>|awk '{print $3}'|xargs docker rmi
# 查找容器IP地址
# docker inspect 容器名或ID | grep "IPAddress"
# 创建网段, 名称: mynet, 分配两个容器在同一网段中 (这样子才可以互相通信)
# docker network create mynet
# docker run -d --net mynet --name container1 my_image
# docker run -it --net mynet --name container1 another_image
